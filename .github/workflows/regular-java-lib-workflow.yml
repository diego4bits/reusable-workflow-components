name: Regular Java Library Workflow
description: > 

on: 
  workflow_dispatch:
  workflow_call:
    inputs:
      # JFrog CLI Configuration
      jf-url:
        description: 'JFrog URL'
        required: true
        type: string
      jf-repo-resolve-releases:
        description: 'Repository for resolving releases'
        required: false
        default: 'maven'
        type: string
      jf-repo-resolve-snapshots:
        description: 'Repository for resolving snapshots'
        required: false
        default: 'maven'
        type: string
      # jf-upload-repo-path: This is needed fot the tagged version workflow
      #   description: 'Path of the JFrog repository where the artifact will be uploaded'
      #   required: false # false meanwhile for testing purposes
      #   type: string
      # Java Setup Configuration
      java-distribution:
        description: 'Java distribution to use (e.g., temurin)'
        required: false
        default: 'temurin'
        type: string
      java-version: 
        description: 'Java version to use (e.g., 17)'
        required: false
        default: '17'
        type: string
      # SonarQube Configuration
      sonar-project-key:
        description: 'SonarQube Project Key'
        required: true
        type: string
      sonar-project-name: 
        description: 'SonarQube Project Name'
        required: true
        type: string
    secrets:
      jf-access-token:
        description: 'JFrog Access Token'
        required: true
      sonar-token:
        description: 'SonarQube Token'
        required: true 
      sonar-host-url:
        description: 'SonarQube URL'
        required: true
      sonar-organization:
        description: 'SonarQube Organization'
        required: true 
      semantic-release-bot-token:
        description: 'GitHub Token for Semantic Release Bot'
        required: true

jobs:
  main-job:
    runs-on: ubuntu-latest

    steps:
    # Setup steps for the workflow
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 es crucial para que SonarQube pueda analizar correctamente
          # el código nuevo, especialmente en Pull Requests (aunque con workflow_dispatch es menos crítico para PRs).
          fetch-depth: 0
          token: ${{ secrets.semantic-release-bot-token }}

      - name: Setup JDK
        uses: diego4bits/reusable-workflow-components/.github/actions/setup-jdk@main
        with:
          java-distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Setup JFrog CLI - Auth Token
        uses: diego4bits/reusable-workflow-components/.github/actions/setup-and-config-jfrog@main
        with:
          jf-url: ${{ inputs.jf-url }}
          jf-access-token: ${{ secrets.jf-access-token }}
          #jf-server-id-resolve: ${{ inputs.jf-server-id-resolve }}
          jf-repo-resolve-releases: ${{ inputs.jf-repo-resolve-releases }}
          jf-repo-resolve-snapshots: ${{ inputs.jf-repo-resolve-snapshots }}

    # --------------------------------------------------------------------------------------------------------     
    # "Actual" steps of the workflow - Commented out for now only to show the scaffolding of the workflow.
    # --------------------------------------------------------------------------------------------------------   
      # ✅ ✅ ✅  Working ✅ ✅ ✅  (Only commented out for testing purposes to save time in execution)
      # With Outputs!!!
      # - name: Build & Test Using Maven & JFrog
      #   id: build-and-test-mvn
      #   uses: diego4bits/reusable-workflow-components/.github/actions/build-and-test-mvn@main

      # - name: List everything in the current directory
      #   run: |
      #     echo "Current directory: ${{ github.workspace }}"
      #     ls -la
      #     ls target/
      # - name: Echo outputs from Build & Test step
      #   run: |
      #     echo "JAR Path: ${{ steps.build-and-test-mvn.outputs.jar-path }}"
      #     echo "POM Path: ${{ steps.build-and-test-mvn.outputs.pom-path }}"

      # ✅ ✅ ✅  Working ✅ ✅ ✅  (Only commented out for testing purposes to save time in execution)
      # REMEMBER THE JAVA_HOME ERROR
      # - name: Dependecy Check Scan
      #   uses: diego4bits/reusable-workflow-components/.github/actions/dependency-check@main
      #   with:
      #     scan-args: |
      #       --disableRetireJS
      #       --scan "**/*.java"
      #       --format HTML
      # ✅ ✅ ✅  Working ✅ ✅ ✅  (Only commented out for testing purposes to save time in execution)
      # - name: SonarQube Scan
      #   uses: diego4bits/reusable-workflow-components/.github/actions/sonarqube-scan@main
      #   with:
      #     sonar-project-key: ${{ inputs.sonar-project-key }}
      #     sonar-project-name: ${{ inputs.sonar-project-name }}
      #     sonar-organization: ${{ secrets.sonar-organization }}
      #     sonar-host-url: ${{ secrets.sonar-host-url }}
      #     sonar-token: ${{ secrets.sonar-token }}
      # ✅ ✅ ✅  Working ✅ ✅ ✅  (Only commented out for testing purposes to save time in execution)
      - name: Extract repository name
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV

      # ✅ ✅ ✅  Working ✅ ✅ ✅  (Only commented out for testing purposes to save time in execution)
      - name: Semantic Release Custom Action
        uses: diego4bits/semantic-release-action@main
        env:
          REPO_NAME: ${{ env.REPO_NAME }}
        with:
          release_branch: develop
          github_token: ${{ secrets.semantic-release-bot-token }}
      # Just a Place holder for the Build & Test Tag step
      # - name: Build & Test Tag
      # Just a Place holder for the Upload Artifacts To JFrog step
      # - name : Upload Artifacts To JFrog
      #   uses: ./.github/libraries/actions/upload-to-jfrog-jar-pom@v1

        
  
